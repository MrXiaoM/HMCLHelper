<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        i/8qSmX/BhY1/wYTKv8aNEb/P2eF/0xzj/8+T13/SVlk/3Keuf9yn7z/SVto/y8+R/8pR1n/HjtM/xEg
        Lv8BAhL/AAAW/xwyR/8qS2b/GTJH/xInOP8cOE7/KU9r/wEDBP8AAAAAAAAAAAIDBP8oSFv/MFZs/zRe
        ef80XHz/MFRs/wURJ/8KG0f/J0R3/yU7X/83SWr/Sl96/1Zzmf9afJ7/X4Sn/1yApf9Ze5//VnOY/0tf
        ev8tNz//GiQ4/xMhTv8AACb/AQEQ/x85S/8tVHH/HDVI/xw3S/8ZLz//AQIC/wAAAAAAAAAAAwUG/058
        nf9Ab4r/N193/0Rxkv8pR2b/J0J1/x0uW/83Snz/VHOs/2ya3f9yper/bp/e/16Ds/9TcZn/VHGa/16D
        s/9uoN7/c6bq/22a1/9Saov/LzdH/xIUMP8UIk3/Fig8/yhLZf8lRlz/LlNu/zBWc/8BAgP/AAAAAAAA
        AAADBQf/UYGk/0V0lP86Zn3/LlNp/yQ3Wv8+UoT/Vnez/26e4v9ypun/aJfU/1p8q/9MZIf/UW+i/2qa
        4v91qOv/Wnup/0tkh/9Ze6n/aZjT/3Sn6f9wn97/VnGW/zdBUP8cIi3/JUBV/y5Ub/8tVHH/MVh2/wED
        BP8AAAAAAAAAAAMFBv9EdZH/PmqB/zpUY/85RU//W32x/3Sl6P9ypun/Z5TO/1Z2ov9TcJn/apbS/2mX
        2f9KZ5r/SGCG/01ojf9Ye6n/b6Dg/2qW1P9Sbpj/VXWg/2eUzv9xpOf/cqPk/1p6pP84Q03/M0hY/zJW
        cv8yWXf/AQME/wAAAAAAAAAACg0O/zlQXv9GVmL/a5Or/01md/9kj8P/ZpLJ/1Nxm/9PbqH/Zo/I/1Jx
        nP9TdJ//XYKz/01pkv9dg7n/Yom+/1JvmP9dg7T/U3Of/0dhj/9We7z/WHmp/1RynP9lkMf/ZI/E/05n
        ef9sla7/R1lm/zRIWP8ICgv/AAAAAAAAAAA0O0FONTk+x1Nqef94qcf/Tmd5/2CIuf9fhbf/TmqT/1F0
        sf9eidH/V3qq/0xojv9Wd6L/VHKc/2qV0P9qldH/UG2a/1NzoP9MaI7/S2mc/1yFzf9ghbz/UW2U/16E
        tv9hirv/UGl7/3yty/9Vb4H/Nj1DyTM5P1AAAAAAAAAAAAAAAAAAAAAAMzY4PjQ2ObU5QEf/YYW3/3Om
        6/9tn+H/T3Cq/0Veh/9Sb5j/caHi/3Om6P9cgrP/SWCD/0Zcf/9PbqT/bJzh/3Gh4v9LaJT/RV6H/1+H
        u/9wo+T/dKfr/2KHuP86Qkr/NjxCtTU7QT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ3
        Oiw1O0GdQ1Nm+WGGtv9unuT/aZrf/2SOxf9WdJ7/T2mP/1h4pf9tnd//ZJPb/1Bwo/9PaY//U3Kb/2CK
        wf9zpuj/c6Xq/2CDtP9DU2f5NTtBnzQ3OiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA0O0EaNTo/iT5HVO9beqP/c6Tm/3Km6P9mk8z/Vnah/1FwoP9Mapz/UnGe/2OQ
        yf9xpOf/c6Tm/1t6pP8+R1TxNDY5iTQ5PRoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzU4DjQ2OXQ6QUnjVnGW/2GGuP9cgKr/Wnyj/1h5
        of9bgKv/YYe4/1d0mv87RVHlNDg8dDM1OA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ2OgY1Oj9eNTo/0VFn
        dv96rMv/eKrK/1Bndv81Oj/TNTtBXjQ7QQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAANDpASjY9RMU2PkTFNTpASgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//5////4H///4Af//wAA//wAAD/wAAAPwAAAA4AAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAcAA
        AAPwAAAP/AAAP/8AAP//4Af///gf///+f/8=
</value>
  </data>
</root>