//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace Cef3.Interop
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Runtime.InteropServices;
    using System.Security;
    
    [StructLayout(LayoutKind.Sequential, Pack = libcef.ALIGN)]
    [SuppressMessage("Microsoft.Design", "CA1049:TypesThatOwnNativeResourcesShouldBeDisposable")]
    internal unsafe struct cef_drag_data_t
    {
        internal cef_base_t _base;
        internal IntPtr _is_link;
        internal IntPtr _is_fragment;
        internal IntPtr _is_file;
        internal IntPtr _get_link_url;
        internal IntPtr _get_link_title;
        internal IntPtr _get_link_metadata;
        internal IntPtr _get_fragment_text;
        internal IntPtr _get_fragment_html;
        internal IntPtr _get_fragment_base_url;
        internal IntPtr _get_file_name;
        internal IntPtr _get_file_names;
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int add_ref_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int release_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_refct_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_link_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_fragment_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int is_file_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_link_url_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_link_title_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_link_metadata_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_fragment_text_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_fragment_html_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_fragment_base_url_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate cef_string_userfree* get_file_name_delegate(cef_drag_data_t* self);
        
        [UnmanagedFunctionPointer(libcef.CEF_CALLBACK)]
        #if !DEBUG
        [SuppressUnmanagedCodeSecurity]
        #endif
        private delegate int get_file_names_delegate(cef_drag_data_t* self, cef_string_list* names);
        
        // AddRef
        private static IntPtr _p0;
        private static add_ref_delegate _d0;
        
        public static int add_ref(cef_drag_data_t* self)
        {
            add_ref_delegate d;
            var p = self->_base._add_ref;
            if (p == _p0) { d = _d0; }
            else
            {
                d = (add_ref_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(add_ref_delegate));
                if (_p0 == IntPtr.Zero) { _d0 = d; _p0 = p; }
            }
            return d(self);
        }
        
        // Release
        private static IntPtr _p1;
        private static release_delegate _d1;
        
        public static int release(cef_drag_data_t* self)
        {
            release_delegate d;
            var p = self->_base._release;
            if (p == _p1) { d = _d1; }
            else
            {
                d = (release_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(release_delegate));
                if (_p1 == IntPtr.Zero) { _d1 = d; _p1 = p; }
            }
            return d(self);
        }
        
        // GetRefCt
        private static IntPtr _p2;
        private static get_refct_delegate _d2;
        
        public static int get_refct(cef_drag_data_t* self)
        {
            get_refct_delegate d;
            var p = self->_base._get_refct;
            if (p == _p2) { d = _d2; }
            else
            {
                d = (get_refct_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_refct_delegate));
                if (_p2 == IntPtr.Zero) { _d2 = d; _p2 = p; }
            }
            return d(self);
        }
        
        // IsLink
        private static IntPtr _p3;
        private static is_link_delegate _d3;
        
        public static int is_link(cef_drag_data_t* self)
        {
            is_link_delegate d;
            var p = self->_is_link;
            if (p == _p3) { d = _d3; }
            else
            {
                d = (is_link_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_link_delegate));
                if (_p3 == IntPtr.Zero) { _d3 = d; _p3 = p; }
            }
            return d(self);
        }
        
        // IsFragment
        private static IntPtr _p4;
        private static is_fragment_delegate _d4;
        
        public static int is_fragment(cef_drag_data_t* self)
        {
            is_fragment_delegate d;
            var p = self->_is_fragment;
            if (p == _p4) { d = _d4; }
            else
            {
                d = (is_fragment_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_fragment_delegate));
                if (_p4 == IntPtr.Zero) { _d4 = d; _p4 = p; }
            }
            return d(self);
        }
        
        // IsFile
        private static IntPtr _p5;
        private static is_file_delegate _d5;
        
        public static int is_file(cef_drag_data_t* self)
        {
            is_file_delegate d;
            var p = self->_is_file;
            if (p == _p5) { d = _d5; }
            else
            {
                d = (is_file_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(is_file_delegate));
                if (_p5 == IntPtr.Zero) { _d5 = d; _p5 = p; }
            }
            return d(self);
        }
        
        // GetLinkURL
        private static IntPtr _p6;
        private static get_link_url_delegate _d6;
        
        public static cef_string_userfree* get_link_url(cef_drag_data_t* self)
        {
            get_link_url_delegate d;
            var p = self->_get_link_url;
            if (p == _p6) { d = _d6; }
            else
            {
                d = (get_link_url_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_link_url_delegate));
                if (_p6 == IntPtr.Zero) { _d6 = d; _p6 = p; }
            }
            return d(self);
        }
        
        // GetLinkTitle
        private static IntPtr _p7;
        private static get_link_title_delegate _d7;
        
        public static cef_string_userfree* get_link_title(cef_drag_data_t* self)
        {
            get_link_title_delegate d;
            var p = self->_get_link_title;
            if (p == _p7) { d = _d7; }
            else
            {
                d = (get_link_title_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_link_title_delegate));
                if (_p7 == IntPtr.Zero) { _d7 = d; _p7 = p; }
            }
            return d(self);
        }
        
        // GetLinkMetadata
        private static IntPtr _p8;
        private static get_link_metadata_delegate _d8;
        
        public static cef_string_userfree* get_link_metadata(cef_drag_data_t* self)
        {
            get_link_metadata_delegate d;
            var p = self->_get_link_metadata;
            if (p == _p8) { d = _d8; }
            else
            {
                d = (get_link_metadata_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_link_metadata_delegate));
                if (_p8 == IntPtr.Zero) { _d8 = d; _p8 = p; }
            }
            return d(self);
        }
        
        // GetFragmentText
        private static IntPtr _p9;
        private static get_fragment_text_delegate _d9;
        
        public static cef_string_userfree* get_fragment_text(cef_drag_data_t* self)
        {
            get_fragment_text_delegate d;
            var p = self->_get_fragment_text;
            if (p == _p9) { d = _d9; }
            else
            {
                d = (get_fragment_text_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_fragment_text_delegate));
                if (_p9 == IntPtr.Zero) { _d9 = d; _p9 = p; }
            }
            return d(self);
        }
        
        // GetFragmentHtml
        private static IntPtr _pa;
        private static get_fragment_html_delegate _da;
        
        public static cef_string_userfree* get_fragment_html(cef_drag_data_t* self)
        {
            get_fragment_html_delegate d;
            var p = self->_get_fragment_html;
            if (p == _pa) { d = _da; }
            else
            {
                d = (get_fragment_html_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_fragment_html_delegate));
                if (_pa == IntPtr.Zero) { _da = d; _pa = p; }
            }
            return d(self);
        }
        
        // GetFragmentBaseURL
        private static IntPtr _pb;
        private static get_fragment_base_url_delegate _db;
        
        public static cef_string_userfree* get_fragment_base_url(cef_drag_data_t* self)
        {
            get_fragment_base_url_delegate d;
            var p = self->_get_fragment_base_url;
            if (p == _pb) { d = _db; }
            else
            {
                d = (get_fragment_base_url_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_fragment_base_url_delegate));
                if (_pb == IntPtr.Zero) { _db = d; _pb = p; }
            }
            return d(self);
        }
        
        // GetFileName
        private static IntPtr _pc;
        private static get_file_name_delegate _dc;
        
        public static cef_string_userfree* get_file_name(cef_drag_data_t* self)
        {
            get_file_name_delegate d;
            var p = self->_get_file_name;
            if (p == _pc) { d = _dc; }
            else
            {
                d = (get_file_name_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_file_name_delegate));
                if (_pc == IntPtr.Zero) { _dc = d; _pc = p; }
            }
            return d(self);
        }
        
        // GetFileNames
        private static IntPtr _pd;
        private static get_file_names_delegate _dd;
        
        public static int get_file_names(cef_drag_data_t* self, cef_string_list* names)
        {
            get_file_names_delegate d;
            var p = self->_get_file_names;
            if (p == _pd) { d = _dd; }
            else
            {
                d = (get_file_names_delegate)Marshal.GetDelegateForFunctionPointer(p, typeof(get_file_names_delegate));
                if (_pd == IntPtr.Zero) { _dd = d; _pd = p; }
            }
            return d(self, names);
        }
        
    }
}
